//定义全局公用的构建配置
buildscript {
//    repositories用来指定什么库
    repositories {
//        优先使用maven本地仓库，再使用maven中央仓库
        mavenLocal()
        mavenCentral()
    }
//    统一管理版本号
    ext{
        springBootVersion='2.1.3.RELEASE'
    }
    dependencies {
//        使用
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

//对于绝大多数多项目构建, 有一些配置对所有项目都是常见的或者说是通用的
//subprojects 方法遍历这个容器的所有元素并且注入指定的配置 . 通过这种方法, 我们可以很容易的定义所有档案和通用依赖的内容清单
//所有子项目的通用配置
subprojects {
    group 'com.ly'
    version '1.0-SNAPSHOT'
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.springframework.boot'

    repositories {
        mavenLocal()
        mavenCentral()
    }
//    依赖版本
    ext{

    }
//compile使用该方式依赖的库将会参与编译和打包
    dependencies {
        compile 'org.springframework.boot:spring-boot-starter-web'

        compile 'org.springframework.boot:spring-boot-starter-jdbc'
        compile 'org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2'
        compile 'com.alibaba:fastjson:1.2.28'
//        redis
        compile 'org.springframework.boot:spring-boot-starter-data-redis'
//        spring-session
        compile 'org.springframework.session:spring-session-data-redis'
//        commons
        compile 'org.apache.commons:commons-lang3:3.8.1'
//        pg
        runtimeOnly 'org.postgresql:postgresql'
//        注解器所在的包
        annotationProcessor 'org.projectlombok:lombok:1.18.2'
//        只有在编译时有效，不会参与打包
        compileOnly 'org.projectlombok:lombok:1.18.2'


    }
}


